/**
 * Generated by @openapi-codegen
 *
 * @version 1.0
 */
import type * as Schemas from "./coreSchemas";

export type CreateAssignmentBody = {
  location?: {
    lat: number;
    lon: number;
    alertType?: string;
    alertId?: string;
  }[];
  priority: number;
  monitors: string[];
  notes?: string;
  areaId: string;
  templateIds: string[];
  /**
   * A JSON string that represents the geostore object
   */
  geostore?: string;
  /**
   * Image file
   *
   * @format binary
   */
  image?: Blob;
  name?: string;
};

export type RouteBody = {
  areaId?: string;
  destination?: Schemas.PointModel;
  difficulty?: string;
  endDate?: number;
  geostoreId?: string;
  id?: string;
  locations?: Schemas.RouteLocationModel[];
  name?: string;
  startDate?: number;
}[];

export type CreateTemplateBody = {
  name: Record<string, any>;
  questions: {
    type: string;
    label: Record<string, any>;
    name: string;
    defaultValue?: string;
    values?: {
      [key: string]: {
        label?: void;
        value?: void;
      };
    };
    maxImageCount?: number;
    order?: number;
    required?: boolean;
    childQuestions?: {
      type?: string;
      label?: Record<string, any>;
      name?: string;
      defaultValue?: string;
      values?: Record<string, any>;
      maxImageCount?: string;
      required?: boolean;
      order?: number;
      conditions?: {
        name?: string;
        value?: number;
      };
    }[];
    conditions?: {
      name?: string;
      value?: string;
    }[];
  }[];
  languages: string[];
  status: "unpublished" | "published";
  defaultLanguage: string;
  /**
   * @default false
   */
  public?: boolean;
  createdAt?: string;
  areaIds?: string[];
};

export type UpdateTemplateBody = {
  name?: Record<string, any>;
  questions?: {
    type?: string;
    label?: Record<string, any>;
    name?: string;
    defaultValue?: string;
    values?: Record<string, any>;
    required?: boolean;
    order?: number;
    childQuestions?: {
      type?: string;
      label?: {
        en?: string;
      };
      name?: string;
      defaultValue?: string;
      values?: string;
      required?: boolean;
      order?: number;
      conditionalValue?: number;
    };
    conditions?: {
      name?: string;
      value?: number;
    }[];
    maxImageCount?: string;
  }[];
  languages?: string[];
  defaultLanguage?: string;
  areaIds?: string[];
};

export type AreaBody = {
  name?: string;
  geojson?: Schemas.GeojsonModel;
  /**
   * Must be image file
   *
   * @format binary
   */
  image?: Blob;
};

export type AreaTeamRelationBody = {
  areaId: string;
  teamId: string;
};

export type AreaTemplateRelationBody = {
  templateId?: string;
  areaId?: string;
};

export type TeamBody = {
  name: string;
  layers?: string[];
};

export type UpdateAssignmentBody = {
  name?: string;
  priority?: number;
  monitors?: string[];
  notes?: string;
  status?: string;
  templateIds?: string[];
  /**
   * Image file
   *
   * @format binary
   */
  image?: Blob;
};

export type CreateAnswerBody = {
  reportName: string;
  areaOfInterest: string;
  areaOfInterestName?: string;
  language: string;
  userPosition?: string;
  clickedPosition?: string;
  date?: string;
  teamId: string;
  assignmentId?: string;
};
