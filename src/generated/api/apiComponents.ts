/**
 * Generated by @openapi-codegen
 *
 * @version 1.0
 */
import * as reactQuery from "@tanstack/react-query";
import { useApiContext, ApiContext } from "./apiContext";
import type * as Fetcher from "./apiFetcher";
import { apiFetch } from "./apiFetcher";
import type * as Schemas from "./apiSchemas";
import type * as Responses from "./apiResponses";

export type GetUserAreasError = Fetcher.ErrorWrapper<
  | {
      status: 401;
      payload: Responses.Error;
    }
  | {
      status: 404;
      payload: Responses.Error;
    }
>;

export type GetUserAreasVariables = ApiContext["fetcherOptions"];

/**
 * Retrieve areas for the logged in user
 */
export const fetchGetUserAreas = (variables: GetUserAreasVariables, signal?: AbortSignal) =>
  apiFetch<undefined, GetUserAreasError, undefined, {}, {}, {}>({
    url: "/v1/forest-watcher/area",
    method: "get",
    ...variables,
    signal
  });

/**
 * Retrieve areas for the logged in user
 */
export const useGetUserAreas = <TData = undefined>(
  variables: GetUserAreasVariables,
  options?: Omit<reactQuery.UseQueryOptions<undefined, GetUserAreasError, TData>, "queryKey" | "queryFn">
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<undefined, GetUserAreasError, TData>(
    queryKeyFn({ path: "/v1/forest-watcher/area", operationId: "getUserAreas", variables }),
    ({ signal }) => fetchGetUserAreas({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions
    }
  );
};

export type PostUserAreaError = Fetcher.ErrorWrapper<{
  status: 401;
  payload: Responses.Error;
}>;

export type PostUserAreaVariables = ApiContext["fetcherOptions"];

/**
 * Create a new area for the logged in user
 */
export const fetchPostUserArea = (variables: PostUserAreaVariables, signal?: AbortSignal) =>
  apiFetch<undefined, PostUserAreaError, undefined, {}, {}, {}>({
    url: "/v1/forest-watcher/area",
    method: "post",
    ...variables,
    signal
  });

/**
 * Create a new area for the logged in user
 */
export const usePostUserArea = (
  options?: Omit<reactQuery.UseMutationOptions<undefined, PostUserAreaError, PostUserAreaVariables>, "mutationFn">
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<undefined, PostUserAreaError, PostUserAreaVariables>(
    (variables: PostUserAreaVariables) => fetchPostUserArea({ ...fetcherOptions, ...variables }),
    options
  );
};

export type GetFwApiHealthcheckError = Fetcher.ErrorWrapper<undefined>;

export type GetFwApiHealthcheckVariables = ApiContext["fetcherOptions"];

export const fetchGetFwApiHealthcheck = (variables: GetFwApiHealthcheckVariables, signal?: AbortSignal) =>
  apiFetch<Responses.Healthcheck, GetFwApiHealthcheckError, undefined, {}, {}, {}>({
    url: "/v1/fw_api/healthcheck",
    method: "get",
    ...variables,
    signal
  });

export const useGetFwApiHealthcheck = <TData = Responses.Healthcheck>(
  variables: GetFwApiHealthcheckVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Responses.Healthcheck, GetFwApiHealthcheckError, TData>,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<Responses.Healthcheck, GetFwApiHealthcheckError, TData>(
    queryKeyFn({ path: "/v1/fw_api/healthcheck", operationId: "getFwApiHealthcheck", variables }),
    ({ signal }) => fetchGetFwApiHealthcheck({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions
    }
  );
};

export type GetV3FwApiHealthcheckError = Fetcher.ErrorWrapper<undefined>;

export type GetV3FwApiHealthcheckVariables = ApiContext["fetcherOptions"];

export const fetchGetV3FwApiHealthcheck = (variables: GetV3FwApiHealthcheckVariables, signal?: AbortSignal) =>
  apiFetch<Responses.Healthcheck, GetV3FwApiHealthcheckError, undefined, {}, {}, {}>({
    url: "/v3/fw_api/healthcheck",
    method: "get",
    ...variables,
    signal
  });

export const useGetV3FwApiHealthcheck = <TData = Responses.Healthcheck>(
  variables: GetV3FwApiHealthcheckVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Responses.Healthcheck, GetV3FwApiHealthcheckError, TData>,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<Responses.Healthcheck, GetV3FwApiHealthcheckError, TData>(
    queryKeyFn({ path: "/v3/fw_api/healthcheck", operationId: "getV3FwApiHealthcheck", variables }),
    ({ signal }) => fetchGetV3FwApiHealthcheck({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions
    }
  );
};

export type GetV3ForestWatcherAreaError = Fetcher.ErrorWrapper<
  | {
      status: 401;
      payload: Responses.Error;
    }
  | {
      status: 404;
      payload: Responses.Error;
    }
>;

export type GetV3ForestWatcherAreaResponse = {
  data?: Schemas.Area;
};

export type GetV3ForestWatcherAreaVariables = ApiContext["fetcherOptions"];

/**
 * Retrieve areas for the logged in user
 */
export const fetchGetV3ForestWatcherArea = (variables: GetV3ForestWatcherAreaVariables, signal?: AbortSignal) =>
  apiFetch<GetV3ForestWatcherAreaResponse, GetV3ForestWatcherAreaError, undefined, {}, {}, {}>({
    url: "/v3/forest-watcher/area",
    method: "get",
    ...variables,
    signal
  });

/**
 * Retrieve areas for the logged in user
 */
export const useGetV3ForestWatcherArea = <TData = GetV3ForestWatcherAreaResponse>(
  variables: GetV3ForestWatcherAreaVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<GetV3ForestWatcherAreaResponse, GetV3ForestWatcherAreaError, TData>,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<GetV3ForestWatcherAreaResponse, GetV3ForestWatcherAreaError, TData>(
    queryKeyFn({ path: "/v3/forest-watcher/area", operationId: "getV3ForestWatcherArea", variables }),
    ({ signal }) => fetchGetV3ForestWatcherArea({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions
    }
  );
};

export type PostV3ForestWatcherAreaError = Fetcher.ErrorWrapper<
  | {
      status: 401;
      payload: Responses.Error;
    }
  | {
      status: 404;
      payload: Responses.Error;
    }
>;

export type PostV3ForestWatcherAreaRequestBody = {
  name: string;
  geojson: Record<string, any>;
  /**
   * @format binary
   */
  image: Blob;
};

export type PostV3ForestWatcherAreaVariables = {
  body: PostV3ForestWatcherAreaRequestBody;
} & ApiContext["fetcherOptions"];

/**
 * Create a new area
 */
export const fetchPostV3ForestWatcherArea = (variables: PostV3ForestWatcherAreaVariables, signal?: AbortSignal) =>
  apiFetch<undefined, PostV3ForestWatcherAreaError, PostV3ForestWatcherAreaRequestBody, {}, {}, {}>({
    url: "/v3/forest-watcher/area",
    method: "post",
    ...variables,
    signal
  });

/**
 * Create a new area
 */
export const usePostV3ForestWatcherArea = (
  options?: Omit<
    reactQuery.UseMutationOptions<undefined, PostV3ForestWatcherAreaError, PostV3ForestWatcherAreaVariables>,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<undefined, PostV3ForestWatcherAreaError, PostV3ForestWatcherAreaVariables>(
    (variables: PostV3ForestWatcherAreaVariables) => fetchPostV3ForestWatcherArea({ ...fetcherOptions, ...variables }),
    options
  );
};

export type GetV3ForestWatcherAreaTeamsError = Fetcher.ErrorWrapper<
  | {
      status: 401;
      payload: Responses.Error;
    }
  | {
      status: 404;
      payload: Responses.Error;
    }
>;

export type GetV3ForestWatcherAreaTeamsResponse = {
  data?: Schemas.Area[];
};

export type GetV3ForestWatcherAreaTeamsVariables = ApiContext["fetcherOptions"];

/**
 * Retrieve a user's areas for the logged in user and also areas associated with their teams
 */
export const fetchGetV3ForestWatcherAreaTeams = (
  variables: GetV3ForestWatcherAreaTeamsVariables,
  signal?: AbortSignal
) =>
  apiFetch<GetV3ForestWatcherAreaTeamsResponse, GetV3ForestWatcherAreaTeamsError, undefined, {}, {}, {}>({
    url: "/v3/forest-watcher/area/teams",
    method: "get",
    ...variables,
    signal
  });

/**
 * Retrieve a user's areas for the logged in user and also areas associated with their teams
 */
export const useGetV3ForestWatcherAreaTeams = <TData = GetV3ForestWatcherAreaTeamsResponse>(
  variables: GetV3ForestWatcherAreaTeamsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<GetV3ForestWatcherAreaTeamsResponse, GetV3ForestWatcherAreaTeamsError, TData>,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<GetV3ForestWatcherAreaTeamsResponse, GetV3ForestWatcherAreaTeamsError, TData>(
    queryKeyFn({ path: "/v3/forest-watcher/area/teams", operationId: "getV3ForestWatcherAreaTeams", variables }),
    ({ signal }) => fetchGetV3ForestWatcherAreaTeams({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions
    }
  );
};

export type DeleteV3ForestWatcherAreaAreaIdTeamsPathParams = {
  areaId: string;
};

export type DeleteV3ForestWatcherAreaAreaIdTeamsError = Fetcher.ErrorWrapper<
  | {
      status: 401;
      payload: Responses.Error;
    }
  | {
      status: 404;
      payload: Responses.Error;
    }
>;

export type DeleteV3ForestWatcherAreaAreaIdTeamsVariables = {
  pathParams: DeleteV3ForestWatcherAreaAreaIdTeamsPathParams;
} & ApiContext["fetcherOptions"];

/**
 * Deletes all team relations for an area given its area id
 */
export const fetchDeleteV3ForestWatcherAreaAreaIdTeams = (
  variables: DeleteV3ForestWatcherAreaAreaIdTeamsVariables,
  signal?: AbortSignal
) =>
  apiFetch<
    undefined,
    DeleteV3ForestWatcherAreaAreaIdTeamsError,
    undefined,
    {},
    {},
    DeleteV3ForestWatcherAreaAreaIdTeamsPathParams
  >({ url: "/v3/forest-watcher/area/{areaId}/teams", method: "delete", ...variables, signal });

/**
 * Deletes all team relations for an area given its area id
 */
export const useDeleteV3ForestWatcherAreaAreaIdTeams = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      DeleteV3ForestWatcherAreaAreaIdTeamsError,
      DeleteV3ForestWatcherAreaAreaIdTeamsVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<
    undefined,
    DeleteV3ForestWatcherAreaAreaIdTeamsError,
    DeleteV3ForestWatcherAreaAreaIdTeamsVariables
  >(
    (variables: DeleteV3ForestWatcherAreaAreaIdTeamsVariables) =>
      fetchDeleteV3ForestWatcherAreaAreaIdTeams({ ...fetcherOptions, ...variables }),
    options
  );
};

export type DeleteV3ForestWatcherAreaAreaIdTemplatesPathParams = {
  areaId: string;
};

export type DeleteV3ForestWatcherAreaAreaIdTemplatesError = Fetcher.ErrorWrapper<
  | {
      status: 401;
      payload: Responses.Error;
    }
  | {
      status: 404;
      payload: Responses.Error;
    }
>;

export type DeleteV3ForestWatcherAreaAreaIdTemplatesVariables = {
  pathParams: DeleteV3ForestWatcherAreaAreaIdTemplatesPathParams;
} & ApiContext["fetcherOptions"];

/**
 * Deletes all template relations for an area given its area id
 */
export const fetchDeleteV3ForestWatcherAreaAreaIdTemplates = (
  variables: DeleteV3ForestWatcherAreaAreaIdTemplatesVariables,
  signal?: AbortSignal
) =>
  apiFetch<
    undefined,
    DeleteV3ForestWatcherAreaAreaIdTemplatesError,
    undefined,
    {},
    {},
    DeleteV3ForestWatcherAreaAreaIdTemplatesPathParams
  >({ url: "/v3/forest-watcher/area/{areaId}/templates", method: "delete", ...variables, signal });

/**
 * Deletes all template relations for an area given its area id
 */
export const useDeleteV3ForestWatcherAreaAreaIdTemplates = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      DeleteV3ForestWatcherAreaAreaIdTemplatesError,
      DeleteV3ForestWatcherAreaAreaIdTemplatesVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<
    undefined,
    DeleteV3ForestWatcherAreaAreaIdTemplatesError,
    DeleteV3ForestWatcherAreaAreaIdTemplatesVariables
  >(
    (variables: DeleteV3ForestWatcherAreaAreaIdTemplatesVariables) =>
      fetchDeleteV3ForestWatcherAreaAreaIdTemplates({ ...fetcherOptions, ...variables }),
    options
  );
};

export type GetV3ForestWatcherAreaAreaidPathParams = {
  areaId: string;
};

export type GetV3ForestWatcherAreaAreaidError = Fetcher.ErrorWrapper<
  | {
      status: 401;
      payload: Responses.Error;
    }
  | {
      status: 404;
      payload: Responses.Error;
    }
>;

export type GetV3ForestWatcherAreaAreaidResponse = {
  data?: Schemas.Area;
};

export type GetV3ForestWatcherAreaAreaidVariables = {
  pathParams: GetV3ForestWatcherAreaAreaidPathParams;
} & ApiContext["fetcherOptions"];

/**
 * Retrieve an area for the logged in user. Area object contains geostore, associated report templates and associated teams.
 */
export const fetchGetV3ForestWatcherAreaAreaid = (
  variables: GetV3ForestWatcherAreaAreaidVariables,
  signal?: AbortSignal
) =>
  apiFetch<
    GetV3ForestWatcherAreaAreaidResponse,
    GetV3ForestWatcherAreaAreaidError,
    undefined,
    {},
    {},
    GetV3ForestWatcherAreaAreaidPathParams
  >({ url: "/v3/forest-watcher/area/{areaId}", method: "get", ...variables, signal });

/**
 * Retrieve an area for the logged in user. Area object contains geostore, associated report templates and associated teams.
 */
export const useGetV3ForestWatcherAreaAreaid = <TData = GetV3ForestWatcherAreaAreaidResponse>(
  variables: GetV3ForestWatcherAreaAreaidVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<GetV3ForestWatcherAreaAreaidResponse, GetV3ForestWatcherAreaAreaidError, TData>,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<GetV3ForestWatcherAreaAreaidResponse, GetV3ForestWatcherAreaAreaidError, TData>(
    queryKeyFn({ path: "/v3/forest-watcher/area/{areaId}", operationId: "getV3ForestWatcherAreaAreaid", variables }),
    ({ signal }) => fetchGetV3ForestWatcherAreaAreaid({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions
    }
  );
};

export type DeleteV3ForestWatcherAreaAreaIdPathParams = {
  areaId: string;
};

export type DeleteV3ForestWatcherAreaAreaIdError = Fetcher.ErrorWrapper<undefined>;

export type DeleteV3ForestWatcherAreaAreaIdVariables = {
  pathParams: DeleteV3ForestWatcherAreaAreaIdPathParams;
} & ApiContext["fetcherOptions"];

/**
 * Delete an area which the logged in user has either created, or is associated with a team they are manager of
 */
export const fetchDeleteV3ForestWatcherAreaAreaId = (
  variables: DeleteV3ForestWatcherAreaAreaIdVariables,
  signal?: AbortSignal
) =>
  apiFetch<
    undefined,
    DeleteV3ForestWatcherAreaAreaIdError,
    undefined,
    {},
    {},
    DeleteV3ForestWatcherAreaAreaIdPathParams
  >({ url: "/v3/forest-watcher/area/{areaId}", method: "delete", ...variables, signal });

/**
 * Delete an area which the logged in user has either created, or is associated with a team they are manager of
 */
export const useDeleteV3ForestWatcherAreaAreaId = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      DeleteV3ForestWatcherAreaAreaIdError,
      DeleteV3ForestWatcherAreaAreaIdVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<
    undefined,
    DeleteV3ForestWatcherAreaAreaIdError,
    DeleteV3ForestWatcherAreaAreaIdVariables
  >(
    (variables: DeleteV3ForestWatcherAreaAreaIdVariables) =>
      fetchDeleteV3ForestWatcherAreaAreaId({ ...fetcherOptions, ...variables }),
    options
  );
};

export type PatchV3ForestWatcherAreaAreaIdPathParams = {
  areaId: string;
};

export type PatchV3ForestWatcherAreaAreaIdError = Fetcher.ErrorWrapper<undefined>;

export type PatchV3ForestWatcherAreaAreaIdResponse = {
  data?: Schemas.Area;
};

export type PatchV3ForestWatcherAreaAreaIdRequestBody = {
  name?: string;
  geojson?: Record<string, any>;
  /**
   * @format binary
   */
  image?: Blob;
};

export type PatchV3ForestWatcherAreaAreaIdVariables = {
  body?: PatchV3ForestWatcherAreaAreaIdRequestBody;
  pathParams: PatchV3ForestWatcherAreaAreaIdPathParams;
} & ApiContext["fetcherOptions"];

/**
 * Update an area
 */
export const fetchPatchV3ForestWatcherAreaAreaId = (
  variables: PatchV3ForestWatcherAreaAreaIdVariables,
  signal?: AbortSignal
) =>
  apiFetch<
    PatchV3ForestWatcherAreaAreaIdResponse,
    PatchV3ForestWatcherAreaAreaIdError,
    PatchV3ForestWatcherAreaAreaIdRequestBody,
    {},
    {},
    PatchV3ForestWatcherAreaAreaIdPathParams
  >({ url: "/v3/forest-watcher/area/{areaId}", method: "patch", ...variables, signal });

/**
 * Update an area
 */
export const usePatchV3ForestWatcherAreaAreaId = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      PatchV3ForestWatcherAreaAreaIdResponse,
      PatchV3ForestWatcherAreaAreaIdError,
      PatchV3ForestWatcherAreaAreaIdVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<
    PatchV3ForestWatcherAreaAreaIdResponse,
    PatchV3ForestWatcherAreaAreaIdError,
    PatchV3ForestWatcherAreaAreaIdVariables
  >(
    (variables: PatchV3ForestWatcherAreaAreaIdVariables) =>
      fetchPatchV3ForestWatcherAreaAreaId({ ...fetcherOptions, ...variables }),
    options
  );
};

export type GetV3ForestWatcherAreaTeamAreasPathParams = {
  teamId: string;
};

export type GetV3ForestWatcherAreaTeamAreasError = Fetcher.ErrorWrapper<
  | {
      status: 401;
      payload: Responses.Error;
    }
  | {
      status: 404;
      payload: Responses.Error;
    }
>;

export type GetV3ForestWatcherAreaTeamAreasResponse = {
  data?: Schemas.Area[];
};

export type GetV3ForestWatcherAreaTeamAreasVariables = {
  pathParams: GetV3ForestWatcherAreaTeamAreasPathParams;
} & ApiContext["fetcherOptions"];

/**
 * Return an array of area Ids that are associated with the supplied team id
 */
export const fetchGetV3ForestWatcherAreaTeamAreas = (
  variables: GetV3ForestWatcherAreaTeamAreasVariables,
  signal?: AbortSignal
) =>
  apiFetch<
    GetV3ForestWatcherAreaTeamAreasResponse,
    GetV3ForestWatcherAreaTeamAreasError,
    undefined,
    {},
    {},
    GetV3ForestWatcherAreaTeamAreasPathParams
  >({ url: "/v3/forest-watcher/area/teamAreas/{teamId}", method: "get", ...variables, signal });

/**
 * Return an array of area Ids that are associated with the supplied team id
 */
export const useGetV3ForestWatcherAreaTeamAreas = <TData = GetV3ForestWatcherAreaTeamAreasResponse>(
  variables: GetV3ForestWatcherAreaTeamAreasVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<GetV3ForestWatcherAreaTeamAreasResponse, GetV3ForestWatcherAreaTeamAreasError, TData>,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<GetV3ForestWatcherAreaTeamAreasResponse, GetV3ForestWatcherAreaTeamAreasError, TData>(
    queryKeyFn({
      path: "/v3/forest-watcher/area/teamAreas/{teamId}",
      operationId: "getV3ForestWatcherAreaTeamAreas",
      variables
    }),
    ({ signal }) => fetchGetV3ForestWatcherAreaTeamAreas({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions
    }
  );
};

export type GetV3ForestWatcherAreaAreaTemplatesPathParams = {
  areaId: string;
};

export type GetV3ForestWatcherAreaAreaTemplatesError = Fetcher.ErrorWrapper<
  | {
      status: 401;
      payload: Responses.Error;
    }
  | {
      status: 404;
      payload: Responses.Error;
    }
>;

export type GetV3ForestWatcherAreaAreaTemplatesResponse = {
  data?: string[];
};

export type GetV3ForestWatcherAreaAreaTemplatesVariables = {
  pathParams: GetV3ForestWatcherAreaAreaTemplatesPathParams;
} & ApiContext["fetcherOptions"];

/**
 * Return an array of template IDs that are associated with the supplied area id
 */
export const fetchGetV3ForestWatcherAreaAreaTemplates = (
  variables: GetV3ForestWatcherAreaAreaTemplatesVariables,
  signal?: AbortSignal
) =>
  apiFetch<
    GetV3ForestWatcherAreaAreaTemplatesResponse,
    GetV3ForestWatcherAreaAreaTemplatesError,
    undefined,
    {},
    {},
    GetV3ForestWatcherAreaAreaTemplatesPathParams
  >({ url: "/v3/forest-watcher/area/areaTemplates/{areaId}", method: "get", ...variables, signal });

/**
 * Return an array of template IDs that are associated with the supplied area id
 */
export const useGetV3ForestWatcherAreaAreaTemplates = <TData = GetV3ForestWatcherAreaAreaTemplatesResponse>(
  variables: GetV3ForestWatcherAreaAreaTemplatesVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      GetV3ForestWatcherAreaAreaTemplatesResponse,
      GetV3ForestWatcherAreaAreaTemplatesError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<
    GetV3ForestWatcherAreaAreaTemplatesResponse,
    GetV3ForestWatcherAreaAreaTemplatesError,
    TData
  >(
    queryKeyFn({
      path: "/v3/forest-watcher/area/areaTemplates/{areaId}",
      operationId: "getV3ForestWatcherAreaAreaTemplates",
      variables
    }),
    ({ signal }) => fetchGetV3ForestWatcherAreaAreaTemplates({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions
    }
  );
};

export type GetV3ForestWatcherAreaAreaTeamsPathParams = {
  areaId: string;
};

export type GetV3ForestWatcherAreaAreaTeamsError = Fetcher.ErrorWrapper<
  | {
      status: 401;
      payload: Responses.Error;
    }
  | {
      status: 404;
      payload: Responses.Error;
    }
>;

export type GetV3ForestWatcherAreaAreaTeamsResponse = {
  data?: string[];
};

export type GetV3ForestWatcherAreaAreaTeamsVariables = {
  pathParams: GetV3ForestWatcherAreaAreaTeamsPathParams;
} & ApiContext["fetcherOptions"];

/**
 * Retrieve teams for an area
 */
export const fetchGetV3ForestWatcherAreaAreaTeams = (
  variables: GetV3ForestWatcherAreaAreaTeamsVariables,
  signal?: AbortSignal
) =>
  apiFetch<
    GetV3ForestWatcherAreaAreaTeamsResponse,
    GetV3ForestWatcherAreaAreaTeamsError,
    undefined,
    {},
    {},
    GetV3ForestWatcherAreaAreaTeamsPathParams
  >({ url: "/v3/forest-watcher/area/areaTeams/{areaId}", method: "get", ...variables, signal });

/**
 * Retrieve teams for an area
 */
export const useGetV3ForestWatcherAreaAreaTeams = <TData = GetV3ForestWatcherAreaAreaTeamsResponse>(
  variables: GetV3ForestWatcherAreaAreaTeamsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<GetV3ForestWatcherAreaAreaTeamsResponse, GetV3ForestWatcherAreaAreaTeamsError, TData>,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<GetV3ForestWatcherAreaAreaTeamsResponse, GetV3ForestWatcherAreaAreaTeamsError, TData>(
    queryKeyFn({
      path: "/v3/forest-watcher/area/areaTeams/{areaId}",
      operationId: "getV3ForestWatcherAreaAreaTeams",
      variables
    }),
    ({ signal }) => fetchGetV3ForestWatcherAreaAreaTeams({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions
    }
  );
};

export type PostV3ForestWatcherAreaAreaIdTemplateTemplateIdPathParams = {
  areaId: string;
  templateId: string;
};

export type PostV3ForestWatcherAreaAreaIdTemplateTemplateIdError = Fetcher.ErrorWrapper<
  | {
      status: 401;
      payload: Responses.Error;
    }
  | {
      status: 404;
      payload: Responses.Error;
    }
>;

export type PostV3ForestWatcherAreaAreaIdTemplateTemplateIdVariables = {
  pathParams: PostV3ForestWatcherAreaAreaIdTemplateTemplateIdPathParams;
} & ApiContext["fetcherOptions"];

/**
 * Link a template to an area
 */
export const fetchPostV3ForestWatcherAreaAreaIdTemplateTemplateId = (
  variables: PostV3ForestWatcherAreaAreaIdTemplateTemplateIdVariables,
  signal?: AbortSignal
) =>
  apiFetch<
    undefined,
    PostV3ForestWatcherAreaAreaIdTemplateTemplateIdError,
    undefined,
    {},
    {},
    PostV3ForestWatcherAreaAreaIdTemplateTemplateIdPathParams
  >({ url: "/v3/forest-watcher/area/{areaId}/template/{templateId}", method: "post", ...variables, signal });

/**
 * Link a template to an area
 */
export const usePostV3ForestWatcherAreaAreaIdTemplateTemplateId = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      PostV3ForestWatcherAreaAreaIdTemplateTemplateIdError,
      PostV3ForestWatcherAreaAreaIdTemplateTemplateIdVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<
    undefined,
    PostV3ForestWatcherAreaAreaIdTemplateTemplateIdError,
    PostV3ForestWatcherAreaAreaIdTemplateTemplateIdVariables
  >(
    (variables: PostV3ForestWatcherAreaAreaIdTemplateTemplateIdVariables) =>
      fetchPostV3ForestWatcherAreaAreaIdTemplateTemplateId({ ...fetcherOptions, ...variables }),
    options
  );
};

export type DeleteV3ForestWatcherAreaAreaIdTemplateTemplateIdPathParams = {
  areaId: string;
  templateId: string;
};

export type DeleteV3ForestWatcherAreaAreaIdTemplateTemplateIdError = Fetcher.ErrorWrapper<undefined>;

export type DeleteV3ForestWatcherAreaAreaIdTemplateTemplateIdVariables = {
  pathParams: DeleteV3ForestWatcherAreaAreaIdTemplateTemplateIdPathParams;
} & ApiContext["fetcherOptions"];

/**
 * Remove a template from an area
 */
export const fetchDeleteV3ForestWatcherAreaAreaIdTemplateTemplateId = (
  variables: DeleteV3ForestWatcherAreaAreaIdTemplateTemplateIdVariables,
  signal?: AbortSignal
) =>
  apiFetch<
    undefined,
    DeleteV3ForestWatcherAreaAreaIdTemplateTemplateIdError,
    undefined,
    {},
    {},
    DeleteV3ForestWatcherAreaAreaIdTemplateTemplateIdPathParams
  >({ url: "/v3/forest-watcher/area/{areaId}/template/{templateId}", method: "delete", ...variables, signal });

/**
 * Remove a template from an area
 */
export const useDeleteV3ForestWatcherAreaAreaIdTemplateTemplateId = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      DeleteV3ForestWatcherAreaAreaIdTemplateTemplateIdError,
      DeleteV3ForestWatcherAreaAreaIdTemplateTemplateIdVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<
    undefined,
    DeleteV3ForestWatcherAreaAreaIdTemplateTemplateIdError,
    DeleteV3ForestWatcherAreaAreaIdTemplateTemplateIdVariables
  >(
    (variables: DeleteV3ForestWatcherAreaAreaIdTemplateTemplateIdVariables) =>
      fetchDeleteV3ForestWatcherAreaAreaIdTemplateTemplateId({ ...fetcherOptions, ...variables }),
    options
  );
};

export type PostV3ForestWatcherAreaAreaIdTeamTeamIdPathParams = {
  areaId: string;
  teamId: string;
};

export type PostV3ForestWatcherAreaAreaIdTeamTeamIdError = Fetcher.ErrorWrapper<
  | {
      status: 401;
      payload: Responses.Error;
    }
  | {
      status: 404;
      payload: Responses.Error;
    }
>;

export type PostV3ForestWatcherAreaAreaIdTeamTeamIdVariables = {
  pathParams: PostV3ForestWatcherAreaAreaIdTeamTeamIdPathParams;
} & ApiContext["fetcherOptions"];

/**
 * Link a team to an area
 */
export const fetchPostV3ForestWatcherAreaAreaIdTeamTeamId = (
  variables: PostV3ForestWatcherAreaAreaIdTeamTeamIdVariables,
  signal?: AbortSignal
) =>
  apiFetch<
    undefined,
    PostV3ForestWatcherAreaAreaIdTeamTeamIdError,
    undefined,
    {},
    {},
    PostV3ForestWatcherAreaAreaIdTeamTeamIdPathParams
  >({ url: "/v3/forest-watcher/area/{areaId}/team/{teamId}", method: "post", ...variables, signal });

/**
 * Link a team to an area
 */
export const usePostV3ForestWatcherAreaAreaIdTeamTeamId = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      PostV3ForestWatcherAreaAreaIdTeamTeamIdError,
      PostV3ForestWatcherAreaAreaIdTeamTeamIdVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<
    undefined,
    PostV3ForestWatcherAreaAreaIdTeamTeamIdError,
    PostV3ForestWatcherAreaAreaIdTeamTeamIdVariables
  >(
    (variables: PostV3ForestWatcherAreaAreaIdTeamTeamIdVariables) =>
      fetchPostV3ForestWatcherAreaAreaIdTeamTeamId({ ...fetcherOptions, ...variables }),
    options
  );
};

export type DeleteV3ForestWatcherAreaAreaIdTeamTeamIdPathParams = {
  areaId: string;
  teamId: string;
};

export type DeleteV3ForestWatcherAreaAreaIdTeamTeamIdError = Fetcher.ErrorWrapper<undefined>;

export type DeleteV3ForestWatcherAreaAreaIdTeamTeamIdVariables = {
  pathParams: DeleteV3ForestWatcherAreaAreaIdTeamTeamIdPathParams;
} & ApiContext["fetcherOptions"];

/**
 * Remove a team from an area
 */
export const fetchDeleteV3ForestWatcherAreaAreaIdTeamTeamId = (
  variables: DeleteV3ForestWatcherAreaAreaIdTeamTeamIdVariables,
  signal?: AbortSignal
) =>
  apiFetch<
    undefined,
    DeleteV3ForestWatcherAreaAreaIdTeamTeamIdError,
    undefined,
    {},
    {},
    DeleteV3ForestWatcherAreaAreaIdTeamTeamIdPathParams
  >({ url: "/v3/forest-watcher/area/{areaId}/team/{teamId}", method: "delete", ...variables, signal });

/**
 * Remove a team from an area
 */
export const useDeleteV3ForestWatcherAreaAreaIdTeamTeamId = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      DeleteV3ForestWatcherAreaAreaIdTeamTeamIdError,
      DeleteV3ForestWatcherAreaAreaIdTeamTeamIdVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<
    undefined,
    DeleteV3ForestWatcherAreaAreaIdTeamTeamIdError,
    DeleteV3ForestWatcherAreaAreaIdTeamTeamIdVariables
  >(
    (variables: DeleteV3ForestWatcherAreaAreaIdTeamTeamIdVariables) =>
      fetchDeleteV3ForestWatcherAreaAreaIdTeamTeamId({ ...fetcherOptions, ...variables }),
    options
  );
};

export type QueryOperation =
  | {
      path: "/v1/forest-watcher/area";
      operationId: "getUserAreas";
      variables: GetUserAreasVariables;
    }
  | {
      path: "/v1/fw_api/healthcheck";
      operationId: "getFwApiHealthcheck";
      variables: GetFwApiHealthcheckVariables;
    }
  | {
      path: "/v3/fw_api/healthcheck";
      operationId: "getV3FwApiHealthcheck";
      variables: GetV3FwApiHealthcheckVariables;
    }
  | {
      path: "/v3/forest-watcher/area";
      operationId: "getV3ForestWatcherArea";
      variables: GetV3ForestWatcherAreaVariables;
    }
  | {
      path: "/v3/forest-watcher/area/teams";
      operationId: "getV3ForestWatcherAreaTeams";
      variables: GetV3ForestWatcherAreaTeamsVariables;
    }
  | {
      path: "/v3/forest-watcher/area/{areaId}";
      operationId: "getV3ForestWatcherAreaAreaid";
      variables: GetV3ForestWatcherAreaAreaidVariables;
    }
  | {
      path: "/v3/forest-watcher/area/teamAreas/{teamId}";
      operationId: "getV3ForestWatcherAreaTeamAreas";
      variables: GetV3ForestWatcherAreaTeamAreasVariables;
    }
  | {
      path: "/v3/forest-watcher/area/areaTemplates/{areaId}";
      operationId: "getV3ForestWatcherAreaAreaTemplates";
      variables: GetV3ForestWatcherAreaAreaTemplatesVariables;
    }
  | {
      path: "/v3/forest-watcher/area/areaTeams/{areaId}";
      operationId: "getV3ForestWatcherAreaAreaTeams";
      variables: GetV3ForestWatcherAreaAreaTeamsVariables;
    };
