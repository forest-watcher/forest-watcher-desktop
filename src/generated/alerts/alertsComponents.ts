/**
 * Generated by @openapi-codegen
 *
 * @version 1.0
 */
import * as reactQuery from "@tanstack/react-query";
import { useAlertsContext, AlertsContext } from "./alertsContext";
import type * as Fetcher from "./alertsFetcher";
import { alertsFetch } from "./alertsFetcher";
import type * as Responses from "./alertsResponses";

export type GetAlertsByGeostorePathParams = {
  dataset: string;
  geostore: string;
};

export type GetAlertsByGeostoreQueryParams = {
  /**
   * Number of days in the past to fetch alerts from
   */
  range?: number;
  /**
   * @default json
   */
  output?: "csv" | "json";
};

export type GetAlertsByGeostoreError = Fetcher.ErrorWrapper<
  | {
      status: 401;
      payload: Responses.Error;
    }
  | {
      status: 404;
      payload: Responses.Error;
    }
>;

export type GetAlertsByGeostoreVariables = {
  pathParams: GetAlertsByGeostorePathParams;
  queryParams?: GetAlertsByGeostoreQueryParams;
} & AlertsContext["fetcherOptions"];

export const fetchGetAlertsByGeostore = (variables: GetAlertsByGeostoreVariables, signal?: AbortSignal) =>
  alertsFetch<
    undefined,
    GetAlertsByGeostoreError,
    undefined,
    {},
    GetAlertsByGeostoreQueryParams,
    GetAlertsByGeostorePathParams
  >({ url: "/fw-alerts/{dataset}/{geostore}", method: "get", ...variables, signal });

export const useGetAlertsByGeostore = <TData = undefined>(
  variables: GetAlertsByGeostoreVariables,
  options?: Omit<reactQuery.UseQueryOptions<undefined, GetAlertsByGeostoreError, TData>, "queryKey" | "queryFn">
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useAlertsContext(options);
  return reactQuery.useQuery<undefined, GetAlertsByGeostoreError, TData>(
    queryKeyFn({ path: "/fw-alerts/{dataset}/{geostore}", operationId: "getAlertsByGeostore", variables }),
    ({ signal }) => fetchGetAlertsByGeostore({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions
    }
  );
};

export type GetFwApiHealthcheckError = Fetcher.ErrorWrapper<undefined>;

export type GetFwApiHealthcheckVariables = AlertsContext["fetcherOptions"];

export const fetchGetFwApiHealthcheck = (variables: GetFwApiHealthcheckVariables, signal?: AbortSignal) =>
  alertsFetch<Responses.Healthcheck, GetFwApiHealthcheckError, undefined, {}, {}, {}>({
    url: "/fw_alerts/healthcheck",
    method: "get",
    ...variables,
    signal
  });

export const useGetFwApiHealthcheck = <TData = Responses.Healthcheck>(
  variables: GetFwApiHealthcheckVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Responses.Healthcheck, GetFwApiHealthcheckError, TData>,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useAlertsContext(options);
  return reactQuery.useQuery<Responses.Healthcheck, GetFwApiHealthcheckError, TData>(
    queryKeyFn({ path: "/fw_alerts/healthcheck", operationId: "getFwApiHealthcheck", variables }),
    ({ signal }) => fetchGetFwApiHealthcheck({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions
    }
  );
};

export type GetV3AlertsGeostoreIdPathParams = {
  geostoreId: string;
};

export type GetV3AlertsGeostoreIdQueryParams = {
  /**
   * One or more datasets to query
   */
  dataset: "GLAD" | "GLADS2" | "RADD" | "VIIRS";
  /**
   * How many days ago to query
   */
  minDate: number;
};

export type GetV3AlertsGeostoreIdError = Fetcher.ErrorWrapper<{
  status: 401;
  payload: Responses.Error;
}>;

export type GetV3AlertsGeostoreIdVariables = {
  pathParams: GetV3AlertsGeostoreIdPathParams;
  queryParams: GetV3AlertsGeostoreIdQueryParams;
} & AlertsContext["fetcherOptions"];

/**
 * Endpoint to find one or more alert datasets for a given geostore. Multiple datasets can be queried as ?dataset=GLAD&dataset=VIIRS&dataset=RADD, etc.
 */
export const fetchGetV3AlertsGeostoreId = (variables: GetV3AlertsGeostoreIdVariables, signal?: AbortSignal) =>
  alertsFetch<
    Responses.Alerts,
    GetV3AlertsGeostoreIdError,
    undefined,
    {},
    GetV3AlertsGeostoreIdQueryParams,
    GetV3AlertsGeostoreIdPathParams
  >({ url: "/v3/alerts/{geostoreId}", method: "get", ...variables, signal });

/**
 * Endpoint to find one or more alert datasets for a given geostore. Multiple datasets can be queried as ?dataset=GLAD&dataset=VIIRS&dataset=RADD, etc.
 */
export const useGetV3AlertsGeostoreId = <TData = Responses.Alerts>(
  variables: GetV3AlertsGeostoreIdVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Responses.Alerts, GetV3AlertsGeostoreIdError, TData>,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useAlertsContext(options);
  return reactQuery.useQuery<Responses.Alerts, GetV3AlertsGeostoreIdError, TData>(
    queryKeyFn({ path: "/v3/alerts/{geostoreId}", operationId: "getV3AlertsGeostoreId", variables }),
    ({ signal }) => fetchGetV3AlertsGeostoreId({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions
    }
  );
};

export type QueryOperation =
  | {
      path: "/fw-alerts/{dataset}/{geostore}";
      operationId: "getAlertsByGeostore";
      variables: GetAlertsByGeostoreVariables;
    }
  | {
      path: "/fw_alerts/healthcheck";
      operationId: "getFwApiHealthcheck";
      variables: GetFwApiHealthcheckVariables;
    }
  | {
      path: "/v3/alerts/{geostoreId}";
      operationId: "getV3AlertsGeostoreId";
      variables: GetV3AlertsGeostoreIdVariables;
    };
