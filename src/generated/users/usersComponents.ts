/**
 * Generated by @openapi-codegen
 *
 * @version 1.0
 */
import * as reactQuery from "@tanstack/react-query";
import { useUsersContext, UsersContext } from "./usersContext";
import type * as Fetcher from "./usersFetcher";
import { usersFetch } from "./usersFetcher";
import type * as Responses from "./usersResponses";

export type DeleteV1UsersError = Fetcher.ErrorWrapper<
  | {
      status: 400;
      payload: Responses.Error;
    }
  | {
      status: 401;
      payload: Responses.Error;
    }
>;

export type DeleteV1UsersResponse = {
  data?: {
    deletedLayers?: string[];
    deletedTemplates?: string[];
    notDeletedTemplates?: string[];
    deletedAnswers?: string[];
    teamsRemovedFrom?: string[];
    teamsNotRemovedFrom?: string[];
    errors?: {
      id?: string;
      error?: string;
    }[];
  };
};

export type DeleteV1UsersVariables = UsersContext["fetcherOptions"];

/**
 * Deletes all data held by 3 sided cube for the existing user. Will return a 400 error if user is admin of a team and a 401 error if user is not authorised. Can delete your own info or any users if using microservice token
 */
export const fetchDeleteV1Users = (variables: DeleteV1UsersVariables, signal?: AbortSignal) =>
  usersFetch<DeleteV1UsersResponse, DeleteV1UsersError, undefined, {}, {}, {}>({
    url: "/delete/:userId",
    method: "delete",
    ...variables,
    signal
  });

/**
 * Deletes all data held by 3 sided cube for the existing user. Will return a 400 error if user is admin of a team and a 401 error if user is not authorised. Can delete your own info or any users if using microservice token
 */
export const useDeleteV1Users = (
  options?: Omit<
    reactQuery.UseMutationOptions<DeleteV1UsersResponse, DeleteV1UsersError, DeleteV1UsersVariables>,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useUsersContext();
  return reactQuery.useMutation<DeleteV1UsersResponse, DeleteV1UsersError, DeleteV1UsersVariables>(
    (variables: DeleteV1UsersVariables) => fetchDeleteV1Users({ ...fetcherOptions, ...variables }),
    options
  );
};

export type GetDeleteUserIdError = Fetcher.ErrorWrapper<{
  status: 401;
  payload: Responses.Error;
}>;

export type GetDeleteUserIdResponse = {
  data?: {
    uesrTeams?: Record<string, any>[];
    areas?: Record<string, any>[];
    templates?: Record<string, any>[];
    layers?: Record<string, any>[];
    answers?: Record<string, any>[];
  };
};

export type GetDeleteUserIdVariables = UsersContext["fetcherOptions"];

/**
 * Returns info on all entities that will be deleted by the delete function
 */
export const fetchGetDeleteUserId = (variables: GetDeleteUserIdVariables, signal?: AbortSignal) =>
  usersFetch<GetDeleteUserIdResponse, GetDeleteUserIdError, undefined, {}, {}, {}>({
    url: "/delete/:userId",
    method: "get",
    ...variables,
    signal
  });

/**
 * Returns info on all entities that will be deleted by the delete function
 */
export const useGetDeleteUserId = <TData = GetDeleteUserIdResponse>(
  variables: GetDeleteUserIdVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<GetDeleteUserIdResponse, GetDeleteUserIdError, TData>,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useUsersContext(options);
  return reactQuery.useQuery<GetDeleteUserIdResponse, GetDeleteUserIdError, TData>(
    queryKeyFn({ path: "/delete/:userId", operationId: "getDeleteUserId", variables }),
    ({ signal }) => fetchGetDeleteUserId({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions
    }
  );
};

export type PostContactError = Fetcher.ErrorWrapper<{
  status: 401;
  payload: Responses.Error;
}>;

export type PostContactResponse = {
  data?: string;
};

export type PostContactRequestBody = {
  platform?: string;
  queryRelate?: string;
  query?: string;
};

export type PostContactVariables = {
  body?: PostContactRequestBody;
} & UsersContext["fetcherOptions"];

/**
 * Sends an email to a prearranged email address containing help form info
 */
export const fetchPostContact = (variables: PostContactVariables, signal?: AbortSignal) =>
  usersFetch<PostContactResponse, PostContactError, PostContactRequestBody, {}, {}, {}>({
    url: "/contact",
    method: "post",
    ...variables,
    signal
  });

/**
 * Sends an email to a prearranged email address containing help form info
 */
export const usePostContact = (
  options?: Omit<
    reactQuery.UseMutationOptions<PostContactResponse, PostContactError, PostContactVariables>,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useUsersContext();
  return reactQuery.useMutation<PostContactResponse, PostContactError, PostContactVariables>(
    (variables: PostContactVariables) => fetchPostContact({ ...fetcherOptions, ...variables }),
    options
  );
};

export type QueryOperation = {
  path: "/delete/:userId";
  operationId: "getDeleteUserId";
  variables: GetDeleteUserIdVariables;
};
