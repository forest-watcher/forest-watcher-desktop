/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  "/teams": {
    post: operations["post-team"];
  };
  "/teams/{id}": {
    get: operations["get-team"];
    delete: operations["delete-team"];
    patch: operations["patch-team"];
    parameters: {
      path: {
        /** Team ObjectId */
        id: string;
      };
    };
  };
  "/teams/user/{userId}": {
    /** Retrieve team by given user id */
    get: operations["get-team-by-user-id"];
    parameters: {
      path: {
        userId: string;
      };
    };
  };
  "/teams/confirm/{token}": {
    /**
     * Confirms the user is within the team with the id given in the JWT token.
     * If not then the user is added to that team and if needed remove from an existing team.
     */
    get: operations["confirm-user-is-within-team"];
    parameters: {
      path: {
        /** Valid user JWT token */
        token: string;
      };
    };
  };
  "/fw_teams/healthcheck": {
    get: operations["get-fw_teams-healthcheck"];
  };
}

export interface components {
  schemas: {
    /** Team */
    Team: {
      name?: string;
      managers?: unknown[];
      users?: unknown[];
      sentInvitations?: unknown[];
      areas?: unknown[];
      layers?: unknown[];
      confirmedUsers?: unknown[];
      /** Format: date-time */
      createdAt: string;
    };
  };
  responses: {
    /** Error Response */
    Error: {
      content: {
        "application/json": {
          errors: {
            status: number;
            detail: string;
          }[];
        };
      };
    };
    /** Team response */
    Team: {
      content: {
        "application/json": {
          data?: {
            /** @default teams */
            type: string;
            /** @description ObjectId */
            id: string;
            attributes?: components["schemas"]["Team"];
          };
        };
      };
    };
    /** Example response */
    Teams: {
      content: {
        "application/json": {
          data?: {
            id: string;
            type: string;
            attributes?: components["schemas"]["Team"];
          }[];
        };
      };
    };
    /** Healthcheck response */
    Healthcheck: {
      content: {
        "application/json": {
          uptime?: number;
        };
      };
    };
  };
  requestBodies: {
    Team: {
      content: {
        "application/json": components["schemas"]["Team"];
      };
    };
  };
}

export interface operations {
  "post-team": {
    responses: {
      200: components["responses"]["Team"];
      400: components["responses"]["Error"];
      401: components["responses"]["Error"];
    };
    requestBody: components["requestBodies"]["Team"];
  };
  "get-team": {
    parameters: {
      path: {
        /** Team ObjectId */
        id: string;
      };
    };
    responses: {
      200: components["responses"]["Team"];
      401: components["responses"]["Error"];
    };
  };
  "delete-team": {
    parameters: {
      path: {
        /** Team ObjectId */
        id: string;
      };
    };
    responses: {
      /** No Content */
      204: never;
      401: components["responses"]["Error"];
      404: components["responses"]["Error"];
    };
  };
  "patch-team": {
    parameters: {
      path: {
        /** Team ObjectId */
        id: string;
      };
    };
    responses: {
      200: components["responses"]["Team"];
      401: components["responses"]["Error"];
    };
    requestBody: components["requestBodies"]["Team"];
  };
  /** Retrieve team by given user id */
  "get-team-by-user-id": {
    parameters: {
      path: {
        userId: string;
      };
    };
    responses: {
      200: components["responses"]["Team"];
      401: components["responses"]["Error"];
      404: components["responses"]["Error"];
    };
  };
  /**
   * Confirms the user is within the team with the id given in the JWT token.
   * If not then the user is added to that team and if needed remove from an existing team.
   */
  "confirm-user-is-within-team": {
    parameters: {
      path: {
        /** Valid user JWT token */
        token: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": {
            /** @example 200 */
            status: number;
            /** @example User confirmed */
            detail: string;
          };
        };
      };
      400: components["responses"]["Error"];
      401: components["responses"]["Error"];
    };
  };
  "get-fw_teams-healthcheck": {
    responses: {
      200: components["responses"]["Healthcheck"];
    };
  };
}

export interface external {}
