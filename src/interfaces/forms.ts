/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  "/v1/reports/{reportId}": {
    get: operations["get-report"];
    put: operations["put-report"];
    delete: operations["delete-report"];
    patch: operations["patch-report"];
    parameters: {
      path: {
        reportId: string;
      };
    };
  };
  "/v1/reports": {
    get: operations["get-all-reports"];
    post: operations["post-report"];
    parameters: {};
  };
  "/v3/reports/getAllAnswersForUser": {
    /** Returns all answers created by a user, and created by any member of a team they manage for all reports */
    get: operations["get-all-answers-for-user"];
    parameters: {};
  };
  "/v1/reports/{reportId}/download-answers": {
    /** Download the given report as a CSV file */
    get: operations["get-report-csv"];
    parameters: {
      path: {
        reportId: string;
      };
    };
  };
  "/v1/reports/{reportId}/answers": {
    get: operations["get-answers-for-report"];
    post: operations["post-answers-for-report"];
    parameters: {
      path: {
        reportId: string;
      };
    };
  };
  "/v3/reports/{reportId}/answers/area/{areaId}": {
    get: operations["get-answers-for-report-and-area"];
    parameters: {
      path: {
        reportId: string;
        areaId: string;
      };
    };
  };
  "/v1/reports/{reportId}/answers/{id}": {
    get: operations["get-answer-for-report"];
    delete: operations["delete-answer-for-report"];
    patch: operations["patch-awnser-for-report"];
    parameters: {
      path: {
        reportId: string;
        id: string;
      };
    };
  };
  "/v1/questionnaire": {
    get: operations["get-all-questionnaires"];
    post: operations["post-questionnaire"];
    parameters: {};
  };
  "/v1/questionnaire/{id}": {
    get: operations["get-questionnaire"];
    delete: operations["delete-questionnaire"];
    patch: operations["patch-questionnaire-id"];
    parameters: {
      path: {
        /** Questionnaire ObjectId */
        id: string;
      };
    };
  };
  "/v1/questionnaire/{id}/download-answers": {
    /** Download the given questionnaire as a CSV file */
    get: operations["get-questionnaire-csv"];
    parameters: {
      path: {
        id: string;
      };
    };
  };
  "/v1/questionnaire/{questionnaireId}/answer": {
    get: operations["get-all-answers-for-questionnaire"];
    post: operations["post-answer-for-questionnaire"];
    parameters: {
      path: {
        questionnaireId: string;
      };
    };
  };
  "/v1/questionnaire/{questionnaireId}/answer/{id}": {
    get: operations["get-answers-for-questionnaire"];
    delete: operations["delete-awnsers-for-questionnaire"];
    patch: operations["patch-awnsers-for-questionnaire"];
    parameters: {
      path: {
        id: string;
        questionnaireId: string;
      };
    };
  };
  "/v1/fw_forms/healthcheck": {
    get: operations["get-fw_forms-healthcheck"];
    parameters: {};
  };
}

export interface components {
  schemas: {
    /** ReportsQuestionConditional */
    ReportsQuestionConditional: {
      type: string;
      /** @default {} */
      label: unknown;
      name: string;
      defaultValue?: unknown;
      /** @default {} */
      values: unknown;
      /** @default false */
      required: boolean;
      order?: number;
      conditionalValue?: number;
    };
    /** ReportsQuestion */
    ReportsQuestion: {
      type: string;
      /** @default {} */
      label: unknown;
      name: string;
      defaultValue?: unknown;
      /** @default {} */
      values: unknown;
      /** @default false */
      required: boolean;
      order?: number;
      childQuestions?: components["schemas"]["ReportsQuestionConditional"][];
      conditions?: {
        name?: string;
        value?: number;
      }[];
    };
    /** Report */
    Report: {
      /** @default {} */
      name: unknown;
      /** @description ObjectId for User */
      user: string;
      languages: unknown[];
      defaultLanguage: string;
      /** @default false */
      public: boolean;
      /** Format: date-time */
      createdAt?: string;
      /** @default unpublished */
      status: string;
      questions?: components["schemas"]["ReportsQuestion"][];
    };
    /** QuestionConditional */
    QuestionConditional: {
      id: string;
      type: string;
      /** @default {} */
      label: unknown;
      name: string;
      defaultValue?: string;
      /** @default [] */
      values: string[];
      /** @default false */
      required: boolean;
      order?: number;
      conditionalValue?: number;
    };
    /** Question */
    Question: {
      type: string;
      label: string;
      name: string;
      defaultValue?: string;
      /** @default [] */
      values: string[];
      /** @default false */
      required: boolean;
      order?: number;
      childQuestions?: components["schemas"]["QuestionConditional"][];
      conditions?: {
        name?: string;
        value?: string;
      }[];
    };
    /** Questionnaire */
    Questionnaire: {
      name: string;
      questions?: components["schemas"]["Question"][];
      /** Format: date-time */
      createdAt: string;
    };
    /** AnswerResponse */
    AnswerResponse: {
      id?: string;
      name: string;
      value?: string;
    };
    /** Answer */
    Answer: {
      /** @description Report ObjectId */
      report: string;
      reportName: string;
      username?: string;
      organization?: string;
      /** @description Area ObjectId */
      areaOfInterest?: string;
      areaOfInterestName?: string;
      language: string;
      userPosition?: unknown[];
      clickedPosition?: unknown[];
      startDate?: string;
      endDate?: string;
      layer?: string;
      /** @description User ObjectId */
      user: string;
      responses?: components["schemas"]["AnswerResponse"][];
      /** Format: date-time */
      createdAt: string;
      fullName?: string;
    };
    /** Response */
    Response: {
      /** @description Questionnaire ObjectId */
      questionnaire: string;
      /** @description User ObjectId */
      user: string;
      responses?: {
        question: string;
        value: string;
      }[];
      /** Format: date-time */
      createdAt: string;
    };
  };
  responses: {
    /** Error Response */
    Error: {
      content: {
        "application/json": {
          errors: {
            status: number;
            detail: string;
          }[];
        };
      };
    };
    /** Questionnaire response */
    Questionnaire: {
      content: {
        "application/json": {
          data?: {
            id: string;
            type: string;
            attributes?: components["schemas"]["Questionnaire"];
          };
        };
      };
    };
    /** Questionnaires response */
    Questionnaires: {
      content: {
        "application/json": {
          data?: {
            id: string;
            type?: string;
            attributes?: components["schemas"]["Questionnaire"];
          }[];
        };
      };
    };
    /** Questionnaire Answer response */
    Answer: {
      content: {
        "application/json": {
          data?: {
            id?: string;
            type?: string;
            attributes?: components["schemas"]["Answer"];
          };
        };
      };
    };
    /** Example response */
    Answers: {
      content: {
        "application/json": {
          data?: {
            id?: string;
            type?: string;
            attributes?: components["schemas"]["Answer"];
          }[];
        };
      };
    };
    /** Report response */
    Report: {
      content: {
        "application/json": {
          data: {
            id: string;
            type: string;
            attributes: components["schemas"]["Report"];
          };
        };
      };
    };
    /** Reports response */
    Reports: {
      content: {
        "application/json": {
          data?: {
            id: string;
            type: string;
            attributes: components["schemas"]["Report"];
          }[];
        };
      };
    };
    /** Response response */
    Response: {
      content: {
        "application/json": {
          data?: {
            id: string;
            type: string;
            attributes: components["schemas"]["Response"];
          };
        };
      };
    };
    /** Responses response */
    Responses: {
      content: {
        "application/json": {
          data?: {
            id?: string;
            type?: string;
            attributes?: components["schemas"]["Response"];
          }[];
        };
      };
    };
    /** Healthcheck response */
    Healthcheck: {
      content: {
        "application/json": {
          uptime?: number;
        };
      };
    };
  };
  requestBodies: {
    Questionnaire: {
      content: {
        "application/json": components["schemas"]["Questionnaire"];
      };
    };
    Answer: {
      content: {
        "application/json": components["schemas"]["Answer"];
      };
    };
    Report: {
      content: {
        "application/json": components["schemas"]["Report"];
      };
    };
    Response: {
      content: {
        "application/json": components["schemas"]["Response"];
      };
    };
  };
}

export interface operations {
  "get-report": {
    parameters: {
      path: {
        reportId: string;
      };
    };
    responses: {
      200: components["responses"]["Report"];
      401: components["responses"]["Error"];
      404: components["responses"]["Error"];
    };
  };
  "put-report": {
    parameters: {
      path: {
        reportId: string;
      };
    };
    responses: {
      200: components["responses"]["Report"];
      401: components["responses"]["Error"];
      403: components["responses"]["Error"];
      404: components["responses"]["Error"];
    };
  };
  "delete-report": {
    parameters: {
      path: {
        reportId: string;
      };
    };
    responses: {
      /** No Content */
      204: never;
      401: components["responses"]["Error"];
      403: components["responses"]["Error"];
      404: components["responses"]["Error"];
    };
  };
  "patch-report": {
    parameters: {
      path: {
        reportId: string;
      };
    };
    responses: {
      200: components["responses"]["Report"];
      401: components["responses"]["Error"];
      404: components["responses"]["Error"];
    };
  };
  "get-all-reports": {
    parameters: {};
    responses: {
      200: components["responses"]["Reports"];
      401: components["responses"]["Error"];
    };
  };
  "post-report": {
    parameters: {};
    responses: {
      200: components["responses"]["Report"];
      400: components["responses"]["Error"];
      401: components["responses"]["Error"];
    };
  };
  /** Returns all answers created by a user, and created by any member of a team they manage for all reports */
  "get-all-answers-for-user": {
    parameters: {};
    responses: {
      200: components["responses"]["Answers"];
      401: components["responses"]["Error"];
    };
  };
  /** Download the given report as a CSV file */
  "get-report-csv": {
    parameters: {
      path: {
        reportId: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "text/csv": { [key: string]: unknown };
        };
      };
      401: components["responses"]["Error"];
      404: components["responses"]["Error"];
    };
  };
  "get-answers-for-report": {
    parameters: {
      path: {
        reportId: string;
      };
    };
    responses: {
      200: components["responses"]["Answers"];
      401: components["responses"]["Error"];
      404: components["responses"]["Error"];
    };
  };
  "post-answers-for-report": {
    parameters: {
      path: {
        reportId: string;
      };
    };
    responses: {
      200: components["responses"]["Answers"];
      400: components["responses"]["Error"];
      401: components["responses"]["Error"];
    };
  };
  "get-answers-for-report-and-area": {
    parameters: {
      path: {
        reportId: string;
        areaId: string;
      };
    };
    responses: {
      200: components["responses"]["Answers"];
      401: components["responses"]["Error"];
      404: components["responses"]["Error"];
    };
  };
  "get-answer-for-report": {
    parameters: {
      path: {
        reportId: string;
        id: string;
      };
    };
    responses: {
      200: components["responses"]["Answer"];
      401: components["responses"]["Error"];
      404: components["responses"]["Error"];
    };
  };
  "delete-answer-for-report": {
    parameters: {
      path: {
        reportId: string;
        id: string;
      };
    };
    responses: {
      /** No Content */
      204: never;
      401: components["responses"]["Error"];
      404: components["responses"]["Error"];
    };
  };
  "patch-awnser-for-report": {
    parameters: {
      path: {
        reportId: string;
        id: string;
      };
    };
    responses: {
      500: components["responses"]["Error"];
    };
  };
  "get-all-questionnaires": {
    parameters: {};
    responses: {
      200: components["responses"]["Questionnaires"];
      401: components["responses"]["Error"];
    };
  };
  "post-questionnaire": {
    parameters: {};
    responses: {
      200: components["responses"]["Questionnaire"];
      401: components["responses"]["Error"];
    };
  };
  "get-questionnaire": {
    parameters: {
      path: {
        /** Questionnaire ObjectId */
        id: string;
      };
    };
    responses: {
      200: components["responses"]["Questionnaire"];
      401: components["responses"]["Error"];
      404: components["responses"]["Error"];
    };
  };
  "delete-questionnaire": {
    parameters: {
      path: {
        /** Questionnaire ObjectId */
        id: string;
      };
    };
    responses: {
      /** No Content */
      204: never;
      401: components["responses"]["Error"];
      404: components["responses"]["Error"];
    };
  };
  "patch-questionnaire-id": {
    parameters: {
      path: {
        /** Questionnaire ObjectId */
        id: string;
      };
    };
    responses: {
      200: components["responses"]["Questionnaire"];
      401: components["responses"]["Error"];
      404: components["responses"]["Error"];
    };
  };
  /** Download the given questionnaire as a CSV file */
  "get-questionnaire-csv": {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "text/csv": { [key: string]: unknown };
        };
      };
      401: components["responses"]["Error"];
      404: components["responses"]["Error"];
    };
  };
  "get-all-answers-for-questionnaire": {
    parameters: {
      path: {
        questionnaireId: string;
      };
    };
    responses: {
      200: components["responses"]["Responses"];
      401: components["responses"]["Error"];
      404: components["responses"]["Error"];
    };
  };
  "post-answer-for-questionnaire": {
    parameters: {
      path: {
        questionnaireId: string;
      };
    };
    responses: {
      200: components["responses"]["Response"];
      400: components["responses"]["Error"];
      401: components["responses"]["Error"];
    };
  };
  "get-answers-for-questionnaire": {
    parameters: {
      path: {
        id: string;
        questionnaireId: string;
      };
    };
    responses: {
      200: components["responses"]["Response"];
      401: components["responses"]["Error"];
      404: components["responses"]["Error"];
    };
  };
  "delete-awnsers-for-questionnaire": {
    parameters: {
      path: {
        id: string;
        questionnaireId: string;
      };
    };
    responses: {
      /** No Content */
      204: never;
      401: components["responses"]["Error"];
      404: components["responses"]["Error"];
    };
  };
  "patch-awnsers-for-questionnaire": {
    parameters: {
      path: {
        id: string;
        questionnaireId: string;
      };
    };
    responses: {
      200: components["responses"]["Response"];
      401: components["responses"]["Error"];
      404: components["responses"]["Error"];
    };
  };
  "get-fw_forms-healthcheck": {
    parameters: {};
    responses: {
      200: components["responses"]["Healthcheck"];
    };
  };
}

export interface external {}
